using System;
using System.Collections.Generic;

namespace TOH_Iterative
{
    internal class Program
    {
        static void Main(string[] args)
        {
            char fromStack = 'A';
            char helperStack = 'B';
            char toStack = 'C';
            int numOfDisks;

            while (!int.TryParse(GetDisks(), out numOfDisks))
            {
                Console.WriteLine("This is not a number. Please enter a valid number.");
            }

            Stack<int> Source = new Stack<int>();
            Stack<int> Aux = new Stack<int>();
            Stack<int> Dest = new Stack<int>();
            for (int j = numOfDisks; j >= 1; j--)
            {
                Source.Push(j);
            }



            DiskMovement(numOfDisks, 'A', 'C', 'B', Source, Aux, Dest);
            Console.WriteLine("The stack is now sorted. ");
        }

        static string GetDisks()
        {
            Console.WriteLine("How many disks would you like to move? ");
            return Console.ReadLine();
        }

        static void DiskMovement(int disks, char source, char dest, char aux, Stack<int> Source, Stack<int> Aux, Stack<int> Dest)
        {

            double numOfMoves = Math.Pow(2, disks) - 1;

            if (disks <= 0)
            {
                return;
            }

            if (disks % 2 == 0)
            {
                char temp = dest;
                dest = aux;
                aux = temp;
            }

            for (int i = 1; i < numOfMoves; i++)
            {
                var currentDisk = 1;
                if (i % 3 == 1)
                {
                    // legal movement between source + dest
                    currentDisk = Source.Pop();
                    Console.WriteLine($"Move disk {currentDisk} from {source} to {dest}");
                    Aux.Push(currentDisk);
                }
                else if (i % 3 == 2)
                {
                    // legal movement between source + aux
                    currentDisk = Source.Pop();
                    Console.WriteLine($"Move disk {currentDisk} from {source} to {aux}");
                    Dest.Push(currentDisk);
                }
                else
                {
                    // legal movement between aux + dest
                    currentDisk = Aux.Pop();
                    Dest.Push(currentDisk);
                    Console.WriteLine($"Move disk {currentDisk} from {aux} to {dest}");
                }

            }
        }
    }
}
