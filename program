using System;
using System.Collections.Generic;

namespace TOH_Iterative
{
    internal class Program
    {
        static void Main(string[] args)
        {
            char fromStack = 'A';
            char helperStack = 'B';
            char toStack = 'C';
            int numOfDisks;

            while (!int.TryParse(GetDisks(), out numOfDisks))
            {
                Console.WriteLine("This is not a number. Please enter a valid number.");
            }

            Stack<int> Source = new Stack<int>();
            Stack<int> Aux = new Stack<int>();
            Stack<int> Dest = new Stack<int>();
            for (int j = numOfDisks; j >= 1; j--)
            {
                Source.Push(j);
            }

            DiskMovement(numOfDisks, 'A', 'C', 'B', Source, Aux, Dest);
            Console.WriteLine("The stack is now sorted. ");
        }

        static string GetDisks()
        {
            Console.WriteLine("How many disks would you like to move? ");
            return Console.ReadLine();
        }

        static void DiskMovement(int disks, char source, char dest, char aux, Stack<int> Source, Stack<int> Aux, Stack<int> Dest)
        {

            double numOfMoves = Math.Pow(2, disks) - 1;

            if (disks <= 0)
            {
                return;
            }

            if (disks! % 2 == 0)
            {
                char temp = dest;
                dest = aux;
                aux = temp;
            }

            Console.WriteLine();

            for (int i = 1; i <= numOfMoves + 1; i++)
            {
                int[] A = Source.ToArray();
                int[] B = Aux.ToArray();
                int[] C = Dest.ToArray();



                // Find the maximum height of the stacks
                int maxHeight = Math.Max(A.Length, Math.Max(B.Length, C.Length));

                // Pad the stacks with empty slots to make them the same height
                Array.Resize(ref A, maxHeight);
                Array.Resize(ref B, maxHeight);
                Array.Resize(ref C, maxHeight);

                // Print the stacks
                for (int j = 0; j < maxHeight; j++)
                {
                    // Print the i-th element of stack A, or a space if A is too short
                    if (j < A.Length)
                    {
                        if (A[A.Length - j - 1] == 0)
                        {
                            Console.Write("  ");
                        }
                        else
                        {
                            Console.Write($"{A[A.Length - j - 1],2}");
                        }
                    }
                    else
                    {
                        Console.Write("  ");
                    }
                    

                    // Print the i-th element of stack B, or a space if B is too short
                    if (j < B.Length)
                    {
                        if (B[B.Length - j - 1] == 0)
                        {
                            Console.Write("  ");
                        }
                        else
                        {
                            Console.Write($"{B[B.Length - j - 1],2}");
                        }
                    }
                    else
                    {
                        Console.Write("  ");
                    }
                    

                    // Print the i-th element of stack C, or a space if C is too short
                    if (j < C.Length)
                    {
                        if (C[C.Length - j - 1] == 0)
                        {
                            Console.Write("  ");
                        }
                        else
                        {
                            Console.Write($"{C[C.Length - j - 1],2}");
                        }
                    }
                    else
                    {
                        Console.Write("  ");
                    }
                   
                    Console.WriteLine();
                }

                Console.WriteLine(" A B C");


                Console.WriteLine("--------------------");

                if (Source.Count() == 0 && Aux.Count() == 0)
                {
                    return;
                }

                var currentDisk = 1;
                if (i % 3 == 1)
                {

                    // legal movement between source + dest
                    // if disks even
                    if (disks % 2 == 0)
                    {
                        if (Aux.Count() == 0)
                        {
                            currentDisk = Source.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {dest}");
                        }
                        else if (Source.Count() == 0)
                        {
                            currentDisk = Aux.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {source}");
                        }
                        else if (Source.Peek() < Aux.Peek())
                        {
                            currentDisk = Source.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {dest}");
                        }
                        else if (Aux.Peek() < Source.Peek())
                        {
                            currentDisk = Aux.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {source}");
                        }
                    }
                    // if disks odd
                    else
                    {
                        if (Dest.Count() == 0)
                        {
                            currentDisk = Source.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {dest}");
                        }
                        else if (Source.Count() == 0)
                        {
                            currentDisk = Dest.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {source}");
                        }
                        else if (Source.Peek() < Dest.Peek())
                        {
                            currentDisk = Source.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {dest}");
                        }
                        else if (Dest.Peek() < Source.Peek())
                        {
                            currentDisk = Dest.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {source}");
                        }
                    }
                }

                else if (i % 3 == 2)
                {
                    // legal movement between source + aux
                    // if disks even
                    if (disks % 2 == 0)
                    {
                        if (Source.Count() == 0)
                        {
                            currentDisk = Dest.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {source}");
                        }
                        else if (Dest.Count() == 0)
                        {
                            currentDisk = Source.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {aux}");
                        }
                        else if (Source.Peek() > Dest.Peek())
                        {
                            currentDisk = Dest.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {source}");
                        }
                        else if (Source.Peek() < Dest.Peek())
                        {
                            currentDisk = Source.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {aux}");
                        }
                    }
                    //if disks odd
                    else
                    {
                        if (Source.Count() == 0)
                        {
                            currentDisk = Aux.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {source}");
                        }
                        else if (Aux.Count() == 0)
                        {
                            currentDisk = Source.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {aux}");
                        }
                        else if (Source.Peek() > Aux.Peek())
                        {
                            currentDisk = Aux.Pop();
                            Source.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {source}");
                        }
                        else if (Source.Peek() < Aux.Peek())
                        {
                            currentDisk = Source.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {source} to {aux}");
                        }
                    }
                }

                else
                {
                    // legal movement between aux + dest
                    // if disks even
                    if (disks % 2 == 0)
                    {
                        if (Dest.Count() == 0)
                        {
                            currentDisk = Aux.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {aux}");
                        }
                        else if (Aux.Count() == 0)
                        {
                            currentDisk = Dest.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {dest}");
                        }
                        else if (Aux.Peek() < Dest.Peek())
                        {
                            currentDisk = Aux.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {aux}");
                        }
                        else if (Dest.Peek() < Aux.Peek())
                        {
                            currentDisk = Dest.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {dest}");
                        }
                    }
                    // if disks odd
                    else
                    {
                        if (Aux.Count() == 0)
                        {
                            currentDisk = Dest.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {aux}");
                        }
                        else if (Dest.Count() == 0)
                        {
                            currentDisk = Aux.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {dest}");
                        }
                        else if (Dest.Peek() < Aux.Peek())
                        {
                            currentDisk = Dest.Pop();
                            Aux.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {dest} to {aux}");
                        }
                        else if (Aux.Peek() < Dest.Peek())
                        {
                            currentDisk = Aux.Pop();
                            Dest.Push(currentDisk);
                            //Console.WriteLine($"Move disk {currentDisk} from {aux} to {dest}");
                        }
                    }
                }


            }
        }
    }
}
